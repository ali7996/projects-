# -*- coding: utf-8 -*-
"""EPL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/128WdAOspDbm3MhXZ1a2Hj6BZAZ2Pfm0b

IMPORT LIBERARIES
"""

import pandas as pd 
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score 
from socket import socket
from tqdm import tqdm

"""READ DATA """

df= pd.read_csv("/content/matches.csv",index_col=0)
df.head()

"""CHANGE 'DATE' DATA TYPE """

df['date']=pd.to_datetime(df['date'])

df.dtypes

"""CHANGE DATA TYPES TO INTEGERS TO USE THEM IN ML ALGORITHMS  """

df['venue_code']=df['venue'].astype('category').cat.codes

df['oppo_code']=df['opponent'].astype('category').cat.codes

df['hour']=df['time'].str.replace(':.+','',regex=True).astype(int)

df['day_code']=df['date'].dt.dayofweek

df['target']=(df['result']=='W').astype(int)

df

"""APPLYING ML ALGORITHM """

rf = RandomForestClassifier(n_estimators=50,min_samples_split=10,random_state=1)

"""TRAIN DATA """

train= df[df['date']<'2022-01-01']

"""TEST DATA """

test= df[df['date']>'2022-01-01']

"""PREDICT DATA """

predictores=['venue_code','oppo_code','hour','day_code']

"""FIT DATA IN CLASSIFIER """

rf.fit(train[predictores],train['target'])

preds=rf.predict(test[predictores])

"""TEST ACCURACY """

acc=accuracy_score(test['target'],preds)

acc

"""COMPARE ACTUAL TO PREDICTED VALUES """

combined=pd.DataFrame(dict(actual=test['target'],predictions=preds))

pd.crosstab(index=combined['actual'],columns=combined['predictions'])

"""TEST PRECISION """

precision_score(test['target'],preds)

"""TAKE A SAMPLE OF DATASET TO SEE IT'S PERFOMANCE """

grouped_matches=df.groupby('team')

group=grouped_matches.get_group('Manchester City')

group

"""COMPUTE THE ROLLING AVG."""

def rolling_averages(group,cols ,new_cols):
  group=group.sort_values('date')
  rolling_stats=group[cols].rolling(3,closed='left').mean()
  group[new_cols]=rolling_stats
  group= group.dropna(subset=new_cols)
  return group

cols =['gf','ga','sh','sot','dist','fk','pk','pkatt']
new_cols=[f'{c}_rolling' for c in cols]

new_cols

rolling_averages(group,cols,new_cols)

matches_rolling=matches.groupby('team').apply(lambda x:rolling_averages(x,cols,new_cols))

matches_rolling

matches_rolling=matches_rolling.droplevel('team')

matches_rolling.index = range(matches_rolling.shape[0])

matches_rolling

"""RE-TRAINING THE MOEDL"""

def make_predictions(data, predictors):
    train = data[data["date"] < '2022-01-01']
    test = data[data["date"] > '2022-01-01']
    rf.fit(train[predictors], train["target"])
    preds = rf.predict(test[predictors])
    combined = pd.DataFrame(dict(actual=test["target"], predicted=preds), index=test.index)
    error = precision_score(test["target"], preds)
    return combined, error

combined, precision = make_predictions(matches_rolling, predictors + new_cols)

precision

combined = combined.merge(matches_rolling[["date", "team", "opponent", "result"]], left_index=True, right_index=True)

combined.head(10)

"""NORMALIZE TEAM NAMES """

class MissingDict(dict):
    __missing__ = lambda self, key: key

map_values = {"Brighton and Hove Albion": "Brighton", "Manchester United": "Manchester Utd", "Newcastle United": "Newcastle Utd", "Tottenham Hotspur": "Tottenham", "West Ham United": "West Ham", "Wolverhampton Wanderers": "Wolves"} 
mapping = MissingDict(**map_values)

mapping['West Ham United']

"""ADD NEW TEAM NAMES TO THE TABLE """

combined["new_team"] = combined["team"].map(mapping)

combined

"""MERGE THE TEAM NAMES WITH THE OPPOININET SIDE TO SEE THE PREDECTIONS """

merged = combined.merge(combined, left_on=["date", "new_team"], right_on=["date", "opponent"])

merged

merged[(merged["predicted_x"] == 1) & (merged["predicted_y"] ==0)]["actual_x"].value_counts()

27/40

df.columns